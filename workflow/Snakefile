from pathlib import Path

import pandas as pd
from snakemake.utils import min_version

min_version("8.25.0")

# Load config
configfile: "config/config.yaml"

# Load sample sheet
samplesheet_df = pd.read_csv(config["sample_sheet"])
samplesheet_df["genome"] = (
    samplesheet_df["genome"].astype(str).str.strip("\"' \t")
)

# Ensure sample ID is unique as there is no concatenation step
if samplesheet_df["sample_id"].nunique() != samplesheet_df["sample_id"].size:
    sample_duplicates = samplesheet_df['sample_id'][samplesheet_df['sample_id'].duplicated()]
    raise ValueError(f"Sample IDs are not unique {sample_duplicates}")

trim_reads = config["trim_reads"]
selected_genome = config["selected_genome"]

samples = samplesheet_df["sample_id"].tolist()


# Load comparison list from CSV
comparisons_file = config["comparison_sheet"]
comparisons_df = pd.read_csv(comparisons_file)
comparisons = comparisons_df.apply(
    lambda row: f"{row['treatment']}_vs_{row['control']}",
    axis=1
).tolist()

# Final report output
report: "report/workflow.rst"

include: "rules/common.smk"

# Download the genome data
include: "rules/download_reference_files.smk"

# Additional reference-based annotation
include: "rules/create_rseqc_annotation.smk"

##################################
# QC and Trimming
##################################
include: "rules/detect_adapters.smk"
include: "rules/fastqc_raw.smk"
include: "rules/multiqc_raw.smk"
include: "rules/trimming.smk"
include: "rules/fastqc_trimmed.smk"
include: "rules/multiqc_trimmed.smk"

##################################
# Alignment and Quantification
##################################
include: "rules/alignment_star.smk"
include: "rules/index_bam.smk"
include: "rules/samtools_stats.smk"
include: "rules/mosdepth.smk"
include: "rules/multiqc_bam.smk"
include: "rules/quantify_transcripts_salmon.smk"
include: "rules/combine_expression_matrix.smk"
include: "rules/extract_bam_stats.smk"
include: "rules/gene_body_coverage.smk"
include: "rules/infer_experiment.smk"
include: "rules/read_distribution.smk"
include: "rules/read_duplication.smk"
include: "rules/rpkm_saturation.smk"
include: "rules/junction_saturation.smk"
include: "rules/bam_stat.smk"
include: "rules/process_genome_content.smk"
include: "rules/go_enrichment.smk"
include: "rules/deseq_analysis_comparison.smk"

rule all:
    input:
       f"results/Quant/Count/combined_expression.csv",
       expand("results/Quant/Count/quant/{sample}/quant.sf", sample=samples),
       expand("results/Differential/deglist/{comparison}_deg_results.csv", comparison=comparisons),
       samplesheet_df["fastq_1"].tolist(),
       samplesheet_df["fastq_2"].tolist(),
       expand("results/adapters/{sample}_adapters.txt", sample=samples),
       expand("results/trimmed/{sample}_{suffix}.atria.fastq.gz", sample=samples, suffix=["1", "2"]),
       expand("results/fastqc/trimmed/{sample}_{suffix}.atria_fastqc.html", sample=samples, suffix=["1", "2"]),
       expand("results/fastqc/raw/{sample}_{suffix}_fastqc.html", sample=samples, suffix=["1", "2"]),
       f"results/multiqc/trimmed/multiqc_report.html",
       f"results/multiqc/raw/multiqc_report.html",
       f"results/multiqc/bam/multiqc_report.html",
       expand("results/aligned/{sample}.bam", sample=samples),
       expand("results/aligned/{sample}.bam.bai", sample=samples),
       expand("results/qc/samtools/{sample}_samtools_stats.txt", sample=samples),
       expand("results/qc/samtools/{sample}_flagstat.txt", sample=samples),
       expand("results/qc/rseqc/{sample}_infer_experiment.txt", sample=samples),
       expand("results/qc/rseqc/{sample}_read_distribution.txt", sample=samples),
       expand("results/qc/rseqc/{sample}.geneBodyCoverage.txt", sample=samples),
       expand("results/qc/rseqc/{sample}.geneBodyCoverage.curves.pdf", sample=samples),
       expand("results/qc/rseqc/{sample}.junctionSaturation_plot.pdf", sample=samples),
       expand("results/qc/rseqc/{sample}.DupRate_plot.pdf", sample=samples),
       expand("results/qc/rseqc/{sample}.DupRate_plot.r", sample=samples),
       expand("results/qc/rseqc/{sample}.saturation.pdf", sample=samples),
       expand("results/qc/rseqc/{sample}.saturation.r", sample=samples),
       expand("results/qc/rseqc/{sample}.eRPKM.xls", sample=samples),
       expand("results/qc/rseqc/{sample}_read_distribution.txt", sample=samples),
       expand("results/qc/rseqc/{sample}_bam_stat.txt", sample=samples),
       expand("results/qc/mosdepth/{sample}.mosdepth.summary.txt", sample=samples),
       expand("results/enrichment/GO/Biological_Process/{comparison}_biological_process_enrichment.csv", comparison=comparisons),
       expand("results/enrichment/GO/Molecular_Function/{comparison}_molecular_function_enrichment.csv", comparison=comparisons),
       expand("results/enrichment/GO/Cellular_Component/{comparison}_cellular_component_enrichment.csv", comparison=comparisons),

       # The reference files + Salmon index for the selected genome
       expand(config["genes_gtf"], selected_genome=selected_genome),
       expand(config["genome_fasta"], selected_genome=selected_genome),
       expand(config["cdna_fasta"], selected_genome=selected_genome),
       f"resources/salmon_index_{selected_genome}",
       f"resources/{selected_genome}.bed",
       f"resources/{selected_genome}_canonical_transcripts.txt"
